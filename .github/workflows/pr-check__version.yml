name: Check version in package.json

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Fetch base branch
        run: git fetch origin master

      - name: Check if version in package.json changed
        id: check_version
        run: |
          git diff origin/master...HEAD package.json > diff.txt
          if grep '"version":' diff.txt > /dev/null; then
            echo "Version updated."
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "Version NOT updated!"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Manage version comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('[BotCheck:Version]')
            );

            const versionUpdated = ${{ steps.check_version.outputs.updated }} === 'true';

            const newBody = versionUpdated
              ? '✅**检查通过**\r\n`package.json` 已正确更新。\r\n<p align="right"><font size=1 color=gray>[BotCheck:Version]</font></p>'
              : '⚠️**警告**\r\n请在 `package.json` 中更新 `version` 。\r\n<p align="right"><font size=1 color=gray>[BotCheck:Version]</font></p>';

            if (existingComment) {
              if (existingComment.body !== newBody) {
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: newBody
                });
              }
            } else if (!versionUpdated) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: newBody
              });
            }
